###########################################################################
#                                                                         #
#   ITRIUM SPb ESLint Configuration                                       #
#                                                                         #
#   0 - turn the rule off                                                 #
#   1 - turn the rule on as a warning (doesn't affect exit code)          #
#   2 - turn the rule on as an error (exit code is 1 when triggered)      #
#                                                                         #
#   see  http://eslint.org/docs/rules/                                    #
#                                                                         #
###########################################################################

ecmaFeatures:
    jsx: true
    arrowFunctions: true
    blockBindings: true
    classes: true
    defaultParams: true
    destructuring: true
    forOf: true
    generators: true
    modules: true
    restParams: true,
    spread: true
    superInFunctions: true
    templateStrings: true
    objectLiteralShorthandMethods: true

env:
    browser: true
    es6: true

globals:
    _: true
    L: true
    $: true
    CONFIG: true
    React: true
    ultima: true
    module: true
    moment: true
    require: true

rules:

    ###########################################################################
    #                                                                         #
    #   POSSIBLE ERRORS: these rules point out areas where you might have     #
    #   made mistakes.                                                        #
    #                                                                         #
    ###########################################################################

    comma-dangle: 2            # disallow trailing commas in object literals
    no-cond-assign: 2          # disallow assignment in conditional expressions
    no-console: 0              # disallow use of console
    no-constant-condition: 2   # disallow use of constant expressions in conditions
    no-control-regex: 2        # disallow control characters in regular expressions
    no-debugger: 1             # disallow use of debugger
    no-dupe-args: 2            # disallow duplicate arguments in functions
    no-dupe-keys: 2            # disallow duplicate keys when creating object literals
    no-duplicate-case: 2       # disallow a duplicate case label. (recommended)
    no-empty: 2                # disallow empty statements
    no-empty-character-class:  # disallow the use of empty character classes in regular expressions
        2
    no-ex-assign: 2            # disallow assigning to the exception in a catch block
    no-extra-boolean-cast: 2   # disallow double-negation boolean casts in a boolean context
    no-extra-parens: 0         # disallow unnecessary parentheses
                               # NOTE: Allow for `return (/* JSX STUFF*/);` situations
    no-extra-semi: 2           # disallow unnecessary semicolons
    no-func-assign: 2          # disallow overwriting functions written as function declarations
    no-inner-declarations: 0   # disallow function or variable declarations in nested blocks
    no-invalid-regexp: 2       # disallow invalid regular expression strings in the RegExp
                               #    constructor
    no-irregular-whitespace: 0 # disallow irregular whitespace outside of strings and comments
    no-negated-in-lhs: 2       # disallow negation of the left operand of an in expression
    no-obj-calls: 2            # disallow the use of object properties of the global object (Math
                               #    and JSON) as functions
    no-regex-spaces: 1         # disallow multiple spaces in a regular expression literal
    no-sparse-arrays: 2        # disallow sparse arrays
    no-unreachable: 2          # disallow unreachable statements after a return, throw, continue,
                               #    or break statement
    use-isnan: 2               # disallow comparisons with the value NaN
    valid-typeof: 2            # ensure that the results of typeof are compared against a
                               #    valid string
    no-unexpected-multiline: 2 # avoid code that looks like two expressions but is actually one
    valid-jsdoc: 1             # ensure JSDoc comments are valid

    ###########################################################################
    #                                                                         #
    #   BEST PRACTICES: these rules are designed to prevent you from making   #
    #   mistakes. They either prescribe a better way of doing something or    #
    #   help you avoid pitfalls.                                              #
    #                                                                         #
    ###########################################################################

    accessor-pairs: 1         # enforces getter/setter pairs in objects
    block-scoped-var: 0       # treat var statements as if they were block scoped
    complexity: [1, 250]      # specify the maximum cyclomatic complexity allowed in a program
    consistent-return: 0      # require return statements to either always or never specify values
    curly: 2                  # specify curly brace conventions for all control statements
    default-case: 2           # require default case in switch statements
    dot-notation: 0           # encourages use of dot notation whenever possible
    dot-location: 0           # enforces consistent newlines before or after dots
    eqeqeq: 0                 # require the use of === and !==
    guard-for-in: 0           # make sure for-in loops have an if statement
    no-alert: 2               # disallow the use of alert, confirm, and prompt
    no-caller: 2              # disallow use of arguments.caller or arguments.callee
    no-div-regex: 1           # disallow division operators explicitly at beginning of regular
                              #    expression
    no-else-return: 1         # disallow else after a return in an if
    no-empty-label: 2         # disallow use of labels for anything other then loops and switches
    no-empty-pattern: 0       # disallow use of empty destructuring patterns
    no-eq-null: 2             # disallow comparisons to null without a type-checking operator
    no-eval: 0                # disallow use of eval()
    no-extend-native: 0       # disallow adding to native types
    no-extra-bind: 2          # disallow unnecessary function binding
    no-fallthrough: 2         # disallow fallthrough of case statements
    no-floating-decimal: 2    # disallow the use of leading or trailing decimal points in numeric
                              #    literals
    no-implied-eval: 2        # disallow use of eval()-like methods
    no-implicit-coercion: 1   # disallow the type conversions with shorter notations
    no-iterator: 2            # disallow usage of __iterator__ property
    no-invalid-this: 0        # disallow this keywords outside of classes or class-like objects
    no-labels: 0              # disallow use of labeled statements
    no-lone-blocks: 2         # disallow unnecessary nested blocks
    no-loop-func: 0           # disallow creation of functions within loops
    no-magic-numbers: 0       # disallow the use of magic numbers
    no-multi-spaces: 0        # disallow use of multiple spaces
    no-multi-str: 2           # disallow use of multiline strings
    no-native-reassign: 2     # disallow reassignments of native objects
    no-new: 0                 # disallow use of new operator when not part of the assignment or
                              #    comparison
    no-new-func: 2            # disallow use of new operator for Function object
    no-new-wrappers: 2        # disallows creating new instances of String, Number, and Boolean
    no-octal: 0               # disallow use of octal literals
    no-octal-escape: 0        # disallow use of octal escape sequences in string literals, such as
                              #    `var foo = "Copyright \251"`
    no-param-reassign: 0      # disallow reassignment of function parameters
    no-process-env: 0         # disallow use of process.env
    no-proto: 2               # disallow usage of __proto__ property
    no-redeclare: 2           # disallow declaring the same variable more then once
    no-return-assign: 1       # disallow use of assignment in return statement
    no-script-url: 0          # disallow use of javascript urls.
    no-self-compare: 2        # disallow comparisons where both sides are exactly the same
    no-sequences: 2           # disallow use of comma operator
    no-throw-literal: 2       # restrict what can be thrown as an exception
    no-unused-expressions: 1  # disallow usage of expressions in statement position
    no-useless-call: 2        # disallow unnecessary .call() and .apply()
    no-useless-concat: 2      # disallow unnecessary concatenation of literals or template literals
    no-void: 2                # disallow use of void operator
    no-warning-comments: 0    # disallow usage of configurable warning terms in comments - e.g.
                              #     TODO or FIXME
    no-with: 2                # disallow use of the with statement
    radix: 0                  # require use of the second argument for parseInt()
    vars-on-top: 0            # requires to declare all vars on top of their containing scope
    wrap-iife: [2, "inside"]  # require immediate function invocation to be wrapped in parentheses
    yoda: 2                   # require or disallow Yoda conditions

    ###########################################################################
    #                                                                         #
    #   STRICT MODE: these rules relate to using strict mode.                 #
    #   STRICT MODE: these rules relate to using strict mode.                 #
    #                                                                         #
    ###########################################################################

    strict: 0                    # require that all functions are run in strict mode

    ###########################################################################
    #                                                                         #
    #   VARIABLES: these rules have to do with variable declarations.         #
    #                                                                         #
    ###########################################################################

    init-declarations: 0           # enforce or disallow variable initializations at definition
    no-catch-shadow: 0             # disallow the catch clause parameter name being the same as a
                                   #    variable in the outer scope
    no-delete-var: 2               # disallow deletion of variables
    no-label-var: 2                # disallow labels that share a name with a variable
    no-shadow: 0                   # disallow declaration of variables already declared in the
                                   #    outer scope
    no-shadow-restricted-names: 2  # disallow shadowing of names such as arguments
    no-undef: 2                    # disallow use of undeclared variables unless mentioned in a
                                   #    /*global */ block
    no-undef-init: 2               # disallow use of undefined when initializing variables
    no-undefined: 0                # disallow use of undefined variable
    no-unused-vars: 0              # disallow declaration of variables that are not used in
                                   #    the code
    no-use-before-define: 2        # disallow use of variables before they are defined

    ###########################################################################
    #                                                                         #
    #   NODE: these rules relate to functionality provided in Node.js.        #
    #                                                                         #
    ###########################################################################

  # handle-callback-err: 0        # enforces error handling in callbacks
  # no-mixed-requires: [1, true]  # disallow mixing regular variable and require declarations
  # no-new-require: 2             # disallow use of new operator with the require function
  # no-path-concat: 2             # disallow string concatenation with __dirname and __filename
  # no-process-exit: 0            # disallow process.exit()
  # no-restricted-modules: 0      # restrict usage of specified node modules
  # no-sync: 0                    # disallow use of synchronous methods

    ###########################################################################
    #                                                                         #
    #   STYLISTIC ISSUES: these rules are purely matters of style and,        #
    #   while valueable to enforce consistently across a project, are         #
    #   quite subjective.                                                     #
    #                                                                         #
    ###########################################################################

    array-bracket-spacing:         # enforce spacing inside array brackets (fixable)
          [2, "never"]             #
    block-spacing: [2, "always"]   # disallow or enforce spaces inside of single line blocks (fixable)
    brace-style: 0                 # enforce one true brace style
    camelcase: 0                   # require camel case names
    comma-spacing:                 # enforce spacing before and after comma
         [2, {"before": false, "after": true}]
    comma-style: 2                 # enforce one true comma style
    consistent-this: [2, "that"]   # enforces consistent naming when capturing the current execution context
    computed-property-spacing: 0   # require or disallow padding inside computed properties (fixable)
    eol-last: 0                    # enforce newline at the end of file, with no multiple empty lines
    id-length: 0                   # this option enforces minimum and maximum identifier lengths (variable names, property names etc.)
    id-match: 0                    # require identifiers to match the provided regular expression
    indent: 1                      # specify tab or space width for your code (fixable)
    jsx-quotes: 0                  # specify whether double or single quotes should be used in JSX attributes
    func-names: 0                  # require function expressions to have a name
    func-style: 0                  # enforces use of function declarations or expressions
    linebreak-style: 0             # disallow mixed 'LF' and 'CRLF' as linebreaks
    lines-around-comment: 0        # enforce empty lines around comments
    key-spacing: 0                 # enforces spacing between keys and values in object literal properties
    max-nested-callbacks: [1, 4]   # specify the maximum depth callbacks can be nested
    new-cap: 0                     # require a capital letter for constructors
    newline-after-var: 0           # require or disallow an empty newline after variable declarations
    new-parens: 2                  # disallow the omission of parentheses when invoking a constructor with no arguments
    no-array-constructor: 2        # disallow use of the Array constructor
    no-lonely-if: 0                # disallow if as the only statement in an else block
    no-mixed-spaces-and-tabs: 2    # disallow mixed spaces and tabs for indentation
    no-nested-ternary: 0           # disallow nested ternary expressions
    no-new-object: 1               # disallow use of the Object constructor
    no-continue: 0                 # disallow use of the continue statement
    semi-spacing: 2                # disallow space before semicolon
    no-spaced-func: 2              # disallow space between function identifier and application
    no-ternary: 0                  # disallow the use of ternary operators
    no-trailing-spaces: 0          # disallow trailing whitespace at the end of lines
    no-multiple-empty-lines: 2     # disallow multiple empty lines
    no-underscore-dangle: 0        # disallow dangling underscores in identifiers
    no-unneeded-ternary: 0         # disallow the use of ternary operators when a simpler alternative exists
    object-curly-spacing: 0        # require or disallow padding inside curly braces (fixable)
    one-var: 0                     # allow just one var statement per function
    operator-assignment:           # require assignment operator shorthand where possible or prohibit it entirely
        [1, "always"]
    operator-linebreak: 0          # enforce operators to be placed before or after line breaks
    padded-blocks: 0               # enforce padding within blocks
    quote-props: 1                 # disallow reserved words being used as object literal keys
    quotes:                        # specify whether double or single quotes should be used
        [0, "single", "avoid-escape"]
    quote-props: 0                 # require quotes around object literal property names
    require-jsdoc: 0               # require JSDoc comment
    semi: [2, "always"]            # require or disallow use of semicolons instead of ASI
    sort-vars: 0                   # sort variables within the same declaration block
    space-after-keywords:          # require a space after certain keywords
        [0, "always"]
    space-before-blocks: 2         # require or disallow space before blocks
    space-in-brackets: 0           # require or disallow spaces inside brackets
    space-in-parens: 0             # require or disallow spaces inside parentheses
    space-before-function-paren: 0 # require or disallow a space before function opening parenthesis (fixable)
    space-before-keywords:         # require a space before certain keywords (fixable)
        [2, "always"]
    space-in-parens: [2, "never"]  # require or disallow spaces inside parentheses
    space-infix-ops: 2             # require spaces around operators
    space-return-throw-case: 2     # require a space after return, throw, and case
    spaced-comment: 2              # require or disallow a space immediately following
                                   #    the // in a line comment
    space-unary-ops: 2             # require or disallow spaces before/after unary operators (fixable)
    wrap-regex: 0                  # require regex literals to be wrapped in parentheses

    ###########################################################################
    #                                                                         #
    #   ECMAScript 6                                                          #
    #                                                                         #
    ###########################################################################

    arrow-body-style: 0             # require braces in arrow function body
    arrow-parens: [2, "always"]     # require parens in arrow function arguments
    arrow-spacing: 2                # require space before/after arrow function's arrow (fixable)
    constructor-super: 2            # verify calls of super() in constructors
    generator-star-spacing: 0       # enforce spacing around the * in generator functions (fixable)
    no-arrow-condition: 2           # disallow arrow functions where a condition is expected
    no-class-assign: 2              # disallow modifying variables of class declarations
    no-const-assign: 1              # disallow modifying variables that are declared using const
    no-dupe-class-members: 2        # disallow duplicate name in class members
    no-this-before-super: 2         # disallow use of this/super before calling super() in constructors.
    no-var: 1                       # require let or const instead of var
    object-shorthand: 1             # require method and property shorthand syntax for object literals
    prefer-arrow-callback: 0        # suggest using arrow functions as callbacks
    prefer-const: 1                 # suggest using const declaration for variables that are never modified after declared
    prefer-reflect: 0               # suggest using Reflect methods where applicable
    prefer-spread: 1                # suggest using the spread operator instead of .apply().
    prefer-template: 0              # suggest using template literals instead of strings concatenation
    require-yield: 0                # disallow generator functions that do not have yield

    ###########################################################################
    #                                                                         #
    #   LEGACY: these rules are included for compatibility with JSHint and    #
    #   JSLint.  While the names of the rules may not match up with their     #
    #   JSHint/JSLint counterpart, the functionality is the same.             #
    #                                                                         #
    ###########################################################################

    max-depth: 0              # specify the maximum depth that blocks can be nested
    max-len: 0                # specify the maximum length of a line in your program
    max-params: [1, 3]        # limits the number of parameters that can be used in the function
                              #    declaration
    max-statements: 0         # specify the maximum number of statement allowed in a function
    no-bitwise: 0             # disallow use of bitwise operators
    no-plusplus: 0            # disallow use of unary operators, ++ and --